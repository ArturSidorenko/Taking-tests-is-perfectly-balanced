{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyautogui\n",
    "import pandas as pd\n",
    "import time\n",
    "from bs4 import BeautifulSoup\n",
    "import cv2\n",
    "import pyperclip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "question = (993,424)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "ch = [(665,521),\n",
    "(665,565),\n",
    "(665,619),\n",
    "(665,665)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def take_clip(i):\n",
    "    pyautogui.moveTo(ch[i])\n",
    "    pyautogui.click(clicks=3, interval=0.3)\n",
    "    pyautogui.hotkey('ctrl', 'c')\n",
    "    data = pyperclip.paste()\n",
    "    \n",
    "    pyautogui.moveTo(ch[i])\n",
    "    pyautogui.click(clicks=1, interval=0.3)\n",
    "    return data\n",
    "\n",
    "def read_file(filename):\n",
    "    with open(filename, encoding='utf-8') as input_file:\n",
    "        text = input_file.read()\n",
    "    return text\n",
    "\n",
    "def parse(t):\n",
    "    u = BeautifulSoup(t)\n",
    "    lig = u.find_all(['strong'])\n",
    "    li2 = []\n",
    "    for item in lig:\n",
    "        li2.append(item.text[3:-2])\n",
    "    return li2\n",
    "\n",
    "def find_ans(filename):\n",
    "    t = read_file(filename)\n",
    "    return parse(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = list(pyautogui.locateAllOnScreen('box.png'))\n",
    "def text_coord(boxy):\n",
    "    return (boxy[0] + 50, boxy[1]+7) \n",
    "\n",
    "pyautogui.moveTo(text_coord(a[0]))\n",
    "pyautogui.click(clicks=3,interval=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "настойкой ромашки\n",
      "настойкой ромашки\n",
      "фурацилином\n",
      "раствором \n",
      "I\n",
      "I\n",
      "I\n",
      "I\n",
      "аэрозольный\n",
      "фекально-оральный\n",
      "воздушно-пылевой\n",
      "контактный\n",
      "отсутствие лака на ногтях\n",
      "отсутствие \n",
      "коротко подстриженные ногти\n",
      "длинные \n",
      "шапочка, противочумный халат, респиратор\n",
      "фартук, маска, антисептик для рук, бахилы\n",
      "одноразовый халат, фартук, бахилы, сапоги\n",
      "одноразовый \n",
      "заменить респираторы экранами\n",
      "заменить респираторы медицинскими масками\n",
      "повторно использовать респиратор вместе с маской, надетой поверх\n",
      "использовать только защитные очки\n",
      "с оборудованием\n",
      "предметами\n",
      "личными предметами пользования\n",
      "повязками \n",
      "один раз в день\n",
      "каждые 2-3 часа\n",
      "каждый час\n",
      "каждые 3-4 часа\n",
      "обеспечивает плотное прилегание\n",
      "не создаёт избыточного сопротивления дыханию\n",
      "не поврежден\n",
      "загрязнен биологической жидкостью пациента\n",
      "пальцы переплетены\n",
      "захват большого пальца ладонью\n",
      "пальцы обеих рук в «замке»\n",
      "кисть сжата в кулак\n",
      "изолировать в бокс приемного отделения\n",
      "поместить \n",
      "рекомендовать самоизоляцию на дому\n",
      "госпитализировать \n",
      "влажную уборку\n",
      "обработку поверхностей в помещениях способом орошения или аэрозольный методом\n",
      "обеспечение организации санитайзерами\n",
      "камерную дезинфекцию мягкого инвентаря и постельного белья\n",
      "контакт с лицом, имеющим симптомы ОРВИ\n",
      "тесный контакт с подтвержденным случаем COVID-19\n",
      "контакт с лицом, общавшимся с больным COVID-19\n",
      "контакт с лицом, общавшимся с подозрительным на COVID-19\n",
      "период выздоровления\n",
      "первые дни разгара болезни\n",
      "последние два дня инкубационного периода\n",
      "первые дни инкубационного периода\n",
      "противочумный костюм\n",
      "респираторы класса FFP2 и выше\n",
      "медицинский халат\n",
      "медицинские маски\n",
      "противогаз\n",
      "четырехслойную \n",
      "полумаску\n",
      "респиратор\n",
      "закрытые бактерицидные облучатели\n",
      "открытые бактерицидные облучатели\n",
      "импульсные установки\n",
      "комбинированные бактерицидные облучатели\n",
      "2 пары перчаток\n",
      "респираторы класса FFP3\n",
      "медицинские маски\n",
      "противочумный костюм\n",
      "закапать 2% раствор борной кислоты\n",
      "промыть \n",
      "промыть глаза фурацилином\n",
      "закапать \n",
      "камерной дезинфекции\n",
      "погружения в дезсредство\n",
      "погружения в дезсредство\n",
      "кипячения\n",
      "трехслойной маски\n",
      "респиратора \n",
      "четырехслойной маски\n",
      "респиратора \n",
      "перчатки\n",
      "шапочку\n",
      "костюм/халат\n",
      "бахилы\n",
      "промыть холодной водой с мылом\n",
      "покинуть \n",
      "протереть 70% раствором спирта\n",
      "протереть \n",
      "не отменяет гигиену рук посредством антисептика или мытья с мылом\n",
      "позволяет не проводить обработку рук антисептиком\n",
      "позволяет пренебречь требованиями к рукам медицинского персонала\n",
      "заменяет мытье рук с мылом\n"
     ]
    }
   ],
   "source": [
    "rightans = find_ans('tests.html')\n",
    "\n",
    "for i in range(24):\n",
    "    ans = []\n",
    "    for i in range(4):\n",
    "        item = take_clip(i).replace(\"\\r\", \"\").replace(\"\\n\",\"\")\n",
    "        print(item)\n",
    "        ans.append(item)\n",
    "    \n",
    "    for i in range(4):\n",
    "        if ans[i] in rightans:\n",
    "            pyautogui.moveTo(ch[i])\n",
    "            pyautogui.click(clicks=1, interval=0.3)\n",
    "\n",
    "    p = pyautogui.locateCenterOnScreen('next.png', confidence=0.7)\n",
    "    pyautogui.moveTo(p)\n",
    "    pyautogui.click()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ледни',\n",
       " 'первые дни разгара болезни',\n",
       " 'последние два дня инкубационного периода',\n",
       " 'лица, контактировавшие с больным',\n",
       " 'повторно использовать респиратор вместе с маской, надетой поверх',\n",
       " 'после подтверждения диагноза COVID-19',\n",
       " 'такого пациента госпитализировать в общую палату',\n",
       " 'протереть 70% раствором спирта',\n",
       " '100%',\n",
       " 'с ослабленной иммунной системой',\n",
       " 'с хроническими заболеваниями',\n",
       " 'старше 65 лет',\n",
       " 'коротко подстриженные ногти',\n",
       " 'отсутствие лака на ногтях',\n",
       " 'отсутствие ювелирных украшений',\n",
       " 'респиратор',\n",
       " 'импульсные установки',\n",
       " 'комбинированные бактерицидные облучатели',\n",
       " 'открытые бактерицидные облучатели',\n",
       " 'закрытые бактерицидные облучатели',\n",
       " 'фекально-оральный',\n",
       " 'влажную уборку',\n",
       " 'камерную дезинфекцию мягкого инвентаря и постельного белья',\n",
       " 'обработку воздуха с использованием открытых ультрафиолетовых облучателей',\n",
       " 'обработку поверхностей в помещениях способом орошения или аэрозольный методом',\n",
       " '60 минут',\n",
       " 'не отменяет гигиену рук посредством антисептика или мытья с мылом',\n",
       " 'подлежат обеззараживанию и удалению как отходы класса В',\n",
       " 'шапочка, противочумный халат, респиратор',\n",
       " 'II',\n",
       " '1 раз в неделю',\n",
       " 'мягкий инвентарь',\n",
       " 'постельные принадлежности',\n",
       " '2 пары перчаток',\n",
       " 'противочумный костюм',\n",
       " 'респираторы класса FFP3',\n",
       " '14 дней',\n",
       " 'медицинские маски',\n",
       " 'медицинский халат',\n",
       " 'повязками и другими предметами ухода за больным',\n",
       " 'предметами, окружающими больного',\n",
       " 'с оборудованием',\n",
       " 'погружения в дезсредство',\n",
       " 'в баках в индивидуальных мешках в кладовой',\n",
       " 'пневмония',\n",
       " 'захват большого пальца ладонью',\n",
       " 'пальцы обеих рук в «замке»',\n",
       " 'пальцы переплетены',\n",
       " 'тесный контакт с подтвержденным случаем COVID-19',\n",
       " 'повышенная температура, сухой кашель, одышка',\n",
       " 'воздушно-капельный',\n",
       " 'воздушно-пылевой',\n",
       " 'контактный',\n",
       " 'пандемии',\n",
       " 'не поврежден',\n",
       " 'не создаёт избыточного сопротивления дыханию',\n",
       " 'обеспечивает плотное прилегание',\n",
       " 'посещение туалета',\n",
       " 'раздача пищи',\n",
       " 'сморкание',\n",
       " 'камерной дезинфекции',\n",
       " 'доступное расположение',\n",
       " 'наличие крана с локтевым/кистевым управлением',\n",
       " 'размещение флаконов с мылом над раковиной',\n",
       " 'перед любой чистой или асептической процедурой',\n",
       " 'перед тем, как прикасаться к пациенту',\n",
       " 'после контакта с жидкостями организма',\n",
       " 'обеззараживанию в медицинской организации',\n",
       " 'не выходя из помещения, немедленно сообщить руководителю медицинской организации о выявленном случае с помощью средств связи',\n",
       " 'не выходя из помещения с использованием средств связи известить руководителя',\n",
       " 'медицинской организации в изоляторе приемного покоя',\n",
       " 'дезинфекция',\n",
       " 'режимно-ограничительные мероприятия',\n",
       " 'своевременное выявление и изоляция больного и носителя',\n",
       " '70% раствором спирта',\n",
       " 'госпитализировать в инфекционный стационар',\n",
       " 'изолировать в бокс приемного отделения',\n",
       " 'мягкий инвентарь',\n",
       " 'постельное белье больного',\n",
       " 'обработку начинают от входной двери здания',\n",
       " 'перчатки',\n",
       " 'респиратора класса защиты FFP2 и выше',\n",
       " 'медицинские работники',\n",
       " 'работники образовательных организаций',\n",
       " 'работники торговли',\n",
       " 'сотрудники полиции',\n",
       " 'бронхоскопия',\n",
       " 'сердечно-легочная реанимация',\n",
       " 'эндотрахеальная интубация',\n",
       " 'закапать 2% раствор борной кислоты',\n",
       " 'каждые 2-3 часа',\n",
       " 'бесконтактную термометрию',\n",
       " 'визуальное выявление симптомов инфекционного заболевания',\n",
       " 'перенаправление потоков поступающих',\n",
       " 'производителем',\n",
       " 'снижают риск заражения пациентов',\n",
       " 'снижают риск контаминации рук персонала транзиторными возбудителями',\n",
       " 'снижают риск профессионального заражения медицинских работников',\n",
       " 'жаемые читател',\n",
       " '',\n",
       " 'сибо, что вы с нам']"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rightans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['пневмония', 'гайморит', 'сердечная недостаточность', 'менингит']"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Box(left=569, top=501, width=28, height=34),\n",
       " Box(left=569, top=551, width=28, height=34),\n",
       " Box(left=569, top=601, width=28, height=34),\n",
       " Box(left=569, top=652, width=28, height=34),\n",
       " Box(left=569, top=702, width=28, height=34)]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "501"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
